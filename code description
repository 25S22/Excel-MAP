# QRadar Log Source Inventory Validation - Standard Operating Procedure

## Overview

### Purpose
This script is designed for **QRadar Log Source Inventory Validation** - an automated process to verify the operational status of log sources in your QRadar environment. It cross-references log source information from Excel spreadsheets with live data from QRadar's API to provide comprehensive status reports on log source activity, configuration, and health.

### Business Use Case
- **Inventory Auditing**: Validate that documented log sources are actually configured and active in QRadar
- **Health Monitoring**: Identify inactive or problematic log sources that may require attention
- **Compliance Reporting**: Generate reports for security audits showing log source operational status
- **Operational Maintenance**: Proactively identify log sources that haven't sent events within specified timeframes

## How the Script Works

### Core Functionality
The script performs a comprehensive validation workflow:

1. **Excel Input Processing**: Reads log source inventories from Excel files containing log source names and IP addresses
2. **QRadar API Integration**: Connects to QRadar's REST API to retrieve real-time log source information
3. **Status Validation**: Compares inventory data against live QRadar configuration and activity data
4. **Activity Analysis**: Determines if log sources are active based on recent event timestamps
5. **Report Generation**: Creates detailed reports highlighting inactive sources, errors, and configuration issues
6. **Email Automation**: Generates Outlook draft emails with filtered results for stakeholder notification

### QRadar API Endpoints Used

#### 1. Connection Testing
- **Endpoint**: `/api/help/versions`
- **Purpose**: Validates QRadar connectivity and authentication
- **Method**: GET
- **Returns**: QRadar version information and connection status

#### 2. Log Source Management API
- **Endpoint**: `/api/config/event_sources/log_source_management/log_sources`
- **Purpose**: Retrieves comprehensive log source configuration and status data
- **Method**: GET with filtering parameters
- **Key Data Retrieved**:
  - Log source ID and name
  - Enabled/disabled status
  - Last event timestamp (in milliseconds)
  - IP address configuration
  - Configuration details

#### 3. Filtering Mechanisms
- **Name-based lookup**: `filter=name="log_source_name"`
- **IP-based lookup**: `filter=ip_address="192.168.1.100"`
- **Fallback logic**: If name lookup fails, automatically attempts IP-based lookup

## Script Execution Guide

### Prerequisites
1. **Python Environment**: Python 3.x with required libraries
2. **QRadar Access**: Valid QRadar credentials with API access permissions
3. **Network Connectivity**: Access to QRadar management interface
4. **Excel Input File**: Properly formatted Excel file with log source inventory
5. **Microsoft Outlook**: Installed for email draft generation (optional)

### Required Python Libraries
```bash
pip install pandas requests urllib3 pywin32 numpy openpyxl
```

### Pre-Execution Checklist

#### 1. Configuration Validation
- [ ] **QRadar Host URL**: Verify `QRADAR_HOST` is correct and accessible
- [ ] **Credentials**: Ensure `QRADAR_USERNAME` and `QRADAR_PASSWORD` are valid
- [ ] **SSL Settings**: Confirm `VERIFY_SSL` setting matches your environment
- [ ] **File Paths**: Validate `INPUT_EXCEL_PATH` points to correct Excel file

#### 2. Excel File Validation
- [ ] **File Format**: Ensure Excel file (.xlsx) is properly formatted
- [ ] **Required Columns**: Verify presence of log source name and IP columns
- [ ] **Data Quality**: Check for empty rows, invalid IP addresses, or malformed names
- [ ] **Sheet Names**: Confirm target sheets exist in the workbook

#### 3. Network and Access Verification
- [ ] **QRadar Connectivity**: Test network access to QRadar host
- [ ] **API Permissions**: Verify account has necessary API access rights
- [ ] **Firewall Rules**: Ensure no blocking rules prevent API communication

### Execution Steps

1. **Start Script**: Run `python qradar_log_source_checker.py`
2. **Connection Test**: Script automatically validates QRadar connectivity
3. **Sheet Processing**: Monitors progress through console output
4. **Report Generation**: Wait for completion and report generation
5. **Email Draft**: Review auto-generated Outlook draft (if Outlook is available)

### Monitoring Execution

#### Console Output Indicators
- **üîó Connection Status**: Shows QRadar connectivity results
- **üìã Sheet Processing**: Displays current sheet and progress
- **üîç Lookup Progress**: Shows individual log source lookup results
- **üìä Statistics**: Provides running totals and success rates
- **üíæ File Operations**: Confirms successful file saves

#### Expected Processing Time
- **Small inventories** (< 100 sources): 2-5 minutes
- **Medium inventories** (100-500 sources): 10-30 minutes
- **Large inventories** (> 500 sources): 30+ minutes

## Configuration and Customization Options

### 1. File and Path Configuration

#### Input File Settings
```python
# Primary Excel file containing log source inventory
INPUT_EXCEL_PATH = r'C:\path\to\your\input.xlsx'

# Output path for filtered results
DRAFT_OUTPUT_PATH = os.path.join(os.path.dirname(INPUT_EXCEL_PATH), 'inactive_and_errors.xlsx')
```

#### Sheet Selection
```python
# Process specific sheets
SHEETS_TO_PROCESS = ['Sheet1', 'Sheet2']

# Process all sheets in workbook
SHEETS_TO_PROCESS = ['all']
```

### 2. Column Mapping Configuration

#### Excel Column Names
```python
# Column containing log source names
LOGSOURCE_COLUMN = 'log source name'

# Column containing IP addresses
IP_COLUMN = 'IP'
```

**Note**: Ensure these match your Excel file's actual column headers exactly.

### 3. QRadar Connection Configuration

#### Basic Connection Settings
```python
# QRadar management interface URL
QRADAR_HOST = 'https://your-qradar-host'

# Authentication credentials
QRADAR_USERNAME = 'your-username'
QRADAR_PASSWORD = 'your-password'

# SSL certificate verification (set to False for self-signed certificates)
VERIFY_SSL = False
```

### 4. Performance and Timing Configuration

#### Activity Threshold
```python
# Days to consider log source inactive
ACTIVITY_THRESHOLD_DAYS = 7  # Adjust based on your monitoring requirements
```

**Recommended Values**:
- **Critical systems**: 1-2 days
- **Standard monitoring**: 7 days
- **Legacy systems**: 14-30 days

#### Request Timeout and Retry Settings
```python
# API request timeout in seconds
REQUEST_TIMEOUT = 30

# Maximum search retries for failed requests
MAX_SEARCH_RETRIES = 20

# Delay between retries in seconds
SEARCH_RETRY_DELAY = 3
```

### 5. Advanced Timestamp Handling

#### Timestamp Validation Range
```python
# Minimum valid timestamp (Unix epoch start)
MIN_TIMESTAMP = 0

# Maximum valid timestamp (32-bit system limit)
MAX_TIMESTAMP = 2147483647
```

### 6. Output Customization

#### Report Categories
The script automatically categorizes log sources into:
- **Active**: Recent events within threshold period
- **Inactive**: No events within threshold period
- **No Activity**: No events recorded in QRadar
- **API Error**: Technical errors during lookup
- **Not Found**: Log source not configured in QRadar

#### Email Configuration
```python
# Email subject and body templates can be customized in the create_outlook_draft function
# Modify the subject and body variables in filter_and_email function
```

## Troubleshooting Common Issues

### Connection Problems
- **SSL Certificate Errors**: Set `VERIFY_SSL = False` for self-signed certificates
- **Timeout Issues**: Increase `REQUEST_TIMEOUT` for slow networks
- **Authentication Failures**: Verify credentials and API permissions

### Data Processing Issues
- **Column Not Found**: Verify `LOGSOURCE_COLUMN` and `IP_COLUMN` match Excel headers
- **Sheet Not Found**: Check `SHEETS_TO_PROCESS` contains valid sheet names
- **Invalid Timestamps**: Script includes automatic timestamp validation and conversion

### Performance Optimization
- **Slow Processing**: Reduce `SEARCH_RETRY_DELAY` for faster networks
- **Memory Issues**: Process sheets individually rather than all at once
- **Large Datasets**: Consider splitting large Excel files into smaller chunks

## Output Files and Reports

### Updated Excel File
- **Location**: Original input file path
- **Content**: Original data plus new status columns
- **Columns Added**: status, qradar_id, enabled, last_seen, activity_status, days_since_last_event

### Filtered Report
- **Location**: Same directory as input file
- **Filename**: `inactive_and_errors.xlsx`
- **Content**: Only problematic log sources requiring attention
- **Includes**: Inactive sources, API errors, and not found items

### Email Draft
- **Platform**: Microsoft Outlook
- **Content**: Executive summary with attached detailed report
- **Automatic**: Generated when issues are found

This SOP provides comprehensive guidance for implementing and maintaining QRadar log source inventory validation processes. Regular execution ensures continuous monitoring of log source health and operational status.
